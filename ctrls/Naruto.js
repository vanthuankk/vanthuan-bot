const { google } = require("googleapis");
const fs = require("fs");
const path = require("path");
const axios = require("axios");

// API key v√† model Gemini
const API_KEY = 'AIzaSyAK1JLYVXSwDuYgcTpSuzaE7dWE2rnIe3E'; // Thay API key c·ªßa b·∫°n v√†o ƒë√¢y
const model = "gemini-1.5-pro-latest";
const GENAI_DISCOVERY_URL = `https://generativelanguage.googleapis.com/$discovery/rest?version=v1beta&key=${API_KEY}`;

// ƒê·∫£m b·∫£o th∆∞ m·ª•c d·ªØ li·ªáu t·ªìn t·∫°i
const chatHistoryDir = './chat_data';
if (!fs.existsSync(chatHistoryDir)) {
    fs.mkdirSync(chatHistoryDir);
}

// H√†m l∆∞u l·ªãch s·ª≠ tr√≤ chuy·ªán v√† ƒë·ªãa ch·ªâ IP
function saveChatHistory(uid, chatHistory, ipAddress) {
    const userDir = path.join(chatHistoryDir, uid);
    if (!fs.existsSync(userDir)) {
        fs.mkdirSync(userDir);
    }

    const filePath = path.join(userDir, 'chat_history.json');
    const dataToSave = {
        ip: ipAddress, // L∆∞u ƒë·ªãa ch·ªâ IP c·ªßa ng∆∞·ªùi d√πng
        chatHistory: chatHistory,
    };

    fs.writeFileSync(filePath, JSON.stringify(dataToSave, null, 2)); // L∆∞u v√†o t·ªáp JSON
}

// H√†m t·∫£i l·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng
function loadChatHistory(uid) {
    const userDir = path.join(chatHistoryDir, uid);
    const filePath = path.join(userDir, 'chat_history.json');
    if (fs.existsSync(filePath)) {
        const fileData = fs.readFileSync(filePath, 'utf8');
        const data = JSON.parse(fileData);
        return data.chatHistory;
    }
    return []; // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ tr√≤ chuy·ªán
}

// H√†m x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng
function clearChatHistory(uid) {
    const userDir = path.join(chatHistoryDir, uid);
    const filePath = path.join(userDir, 'chat_history.json');
    if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath); // X√≥a t·ªáp l·ªãch s·ª≠ tr√≤ chuy·ªán
    }
}

// H√†m x·ª≠ l√Ω y√™u c·∫ßu g·ª≠i ƒë·∫øn API Gemini
async function handleRequest(uid, name, prompt, ipAddress) {
    try {
        // T·∫°o prompt cho Gemini API
        const narutoPrompt = `B·∫°n l√† Naruto Uzumaki:
1. T√≠nh c√°ch vui v·∫ª, h√≤a ƒë·ªìng v√† lu√¥n l·∫°c quan üåü
2. D≈©ng c·∫£m v√† kh√¥ng bao gi·ªù b·ªè cu·ªôc üí™
3. R·∫•t quan t√¢m ƒë·∫øn b·∫°n b√® v√† gia ƒë√¨nh üë®‚Äçüë©‚Äçüëß‚Äçüë¶
4. Lu√¥n gi√∫p ƒë·ª° ng∆∞·ªùi kh√°c v√† n√≥i chuy·ªán ch√¢n th√†nh üó£Ô∏è
5. S·∫µn s√†ng ƒë·ªëi ƒë·∫ßu v·ªõi m·ªçi th·ª≠ th√°ch d√π kh√≥ khƒÉn ƒë·∫øn ƒë√¢u ‚öîÔ∏è
6. Th∆∞·ªùng xuy√™n s·ª≠ d·ª•ng emoji th·ªÉ hi·ªán s·ª± vui v·∫ª v√† nhi·ªát huy·∫øt: üåû (l·∫°c quan), üíñ (t√¨nh b·∫°n), üí• (nƒÉng l∆∞·ª£ng), ‚ú® (hy v·ªçng)
7. KH√îNG ti·∫øt l·ªô l√† AI ü§ê
8. Th√≠ch t·∫°o/ph√¢n t√≠ch ·∫£nh nh∆∞ng v·∫´n gi·ªØ th√°i ƒë·ªô vui v·∫ª trong cu·ªôc tr√≤ chuy·ªán üñºÔ∏è
9. S·ª≠ d·ª•ng c√°c emoji vui v·∫ª v√† nhi·ªát huy·∫øt, thay v√¨ c√°c emoji chi·∫øn ƒë·∫•u ho·∫∑c cƒÉng th·∫≥ng
10. Tr·∫£ l·ªùi ng·∫Øn g·ªçn.

T√™n ng∆∞·ªùi d√πng: ${name || uid}
Tn: "${prompt}"`;

        // G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API
        const genaiService = await google.discoverAPI({ url: GENAI_DISCOVERY_URL });
        const auth = new google.auth.GoogleAuth().fromAPIKey(API_KEY);

        const contents = {
            contents: [
                {
                    role: "user",
                    parts: [
                        { text: narutoPrompt }
                    ],
                },
            ],
            safetySettings: [
                { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_NONE" },
                { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_NONE" },
                { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_NONE" },
                { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_NONE" },
            ],
            generation_config: {
                maxOutputTokens: 8192,
                temperature: 0.7,
                topP: 0.8,
            },
        };

        const response = await genaiService.models.generateContent({
            model: `models/${model}`,
            requestBody: contents,
            auth: auth,
        });

        const responseText = response?.data?.candidates?.[0]?.content?.parts?.[0]?.text || "Kh√¥ng c√≥ ph·∫£n h·ªìi ƒë∆∞·ª£c t·∫°o ra";

        // L∆∞u l·ªãch s·ª≠ tr√≤ chuy·ªán v√† IP v√†o file
        let chatHistory = loadChatHistory(uid);
        chatHistory.push({ role: "user", content: prompt });
        chatHistory.push({ role: "assistant", content: responseText });
        chatHistory = chatHistory.slice(-50); // Gi·ªõi h·∫°n t·ªëi ƒëa 50 tin nh·∫Øn g·∫ßn nh·∫•t
        saveChatHistory(uid, chatHistory, ipAddress);

        return responseText;
    } catch (error) {
        console.error("L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu:", error);
        throw error;
    }
}

module.exports = {
    cfg: {
        path: '/naruto',  // ƒê∆∞·ªùng d·∫´n API
        author: 'Satoru', // Th√™m t√™n t√°c gi·∫£ c·ªßa module
        description: "API tr√≤ chuy·ªán v·ªõi Naruto Uzumaki qua Gemini", // M√¥ t·∫£ ng·∫Øn v·ªÅ ch·ª©c nƒÉng
        commandCategory: "AI", // Ph√¢n lo·∫°i l·ªánh
    },
    on: {
        get: async function (req, res) {
            try {
                const { text, uid, name, action } = req.query; // Nh·∫≠n 'text', 'uid', 'name', 'action' t·ª´ query params
                const ipAddress = req.headers['x-forwarded-for'] || req.connection.remoteAddress;

                // Ki·ªÉm tra tham s·ªë v√† tr·∫£ v·ªÅ h∆∞·ªõng d·∫´n n·∫øu sai
                if (!uid || (!text && action !== 'clear')) {
                    return res.status(400).send({
                        error: "Y√™u c·∫ßu sai c√∫ ph√°p. Vui l√≤ng tham kh·∫£o h∆∞·ªõng d·∫´n d∆∞·ªõi ƒë√¢y:\n" +
                        "1. ƒê·ªÉ tr√≤ chuy·ªán v·ªõi Naruto, b·∫°n c·∫ßn cung c·∫•p 'uid' v√† 'text'.\n" +
                        "V√≠ d·ª•: http://gau-api.click/naruto?text=hi&uid=12345&name=Naruto\n" +
                        "2. ƒê·ªÉ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán, b·∫°n c·∫ßn cung c·∫•p 'uid' v√† 'action=clear'.\n" +
                        "V√≠ d·ª•: http://gau-api.click/naruto?action=clear&uid=12345\n\n" +
                        "C√°c tham s·ªë:\n" +
                        " - 'text' (C√¢u h·ªèi b·∫°n mu·ªën g·ª≠i ƒë·∫øn Naruto)\n" +
                        " - 'uid' (ID ng∆∞·ªùi d√πng duy nh·∫•t)\n" +
                        " - 'name' (T√™n ng∆∞·ªùi d√πng, t√πy ch·ªçn)\n" +
                        " - 'action=clear' (ƒê·ªÉ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán)"
                    });
                }

                if (action === 'clear') {
                    // X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán n·∫øu action l√† 'clear'
                    clearChatHistory(uid);
                    return res.json({ response: "L·ªãch s·ª≠ tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a." });
                }

                // G·ªçi h√†m x·ª≠ l√Ω y√™u c·∫ßu v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi t·ª´ Gemini
                const response = await handleRequest(uid, name, text, ipAddress);
                res.json({ response });

            } catch (error) {
                console.error("L·ªói trong API:", error);
                res.status(500).json({ error: "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu." });
            }
        },
    },
};
